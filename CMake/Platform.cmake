set(D3D11_SUPPORTED FALSE CACHE INTERNAL "D3D11 is not spported")
set(D3D12_SUPPORTED FALSE CACHE INTERNAL "D3D12 is not spported")
set(GL_SUPPORTED FALSE CACHE INTERNAL "GL is not spported")
set(GLES_SUPPORTED FALSE CACHE INTERNAL "GLES is not spported")
set(VULKAN_SUPPORTED FALSE CACHE INTERNAL "Vulkan is not spported")
set(METAL_SUPPORTED FALSE CACHE INTERNAL "Metal is not spported")

# Create defines based on platform
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(TARGET_PLATFORM_WINDOWS 1)
    set(TARGET_PLATFORM "windows")
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(TARGET_PLATFORM_LINUX 1)
    set(TARGET_PLATFORM "linux")
elseif (CMAKE_SYSTEM_NAME MATCHES "Xbone")
    set(TARGET_PLATFORM_XBONE 1)
    set(TARGET_PLATFORM "mac")
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
    set(TARGET_PLATFORM_ANDROID 1)
    set(TARGET_PLATFORM "android")
else()
    set(TARGET_PLATFORM "unknown")
    message(WARNING "[!] Unhandled Compiler")
endif ()


# Determine target architecture
if ((CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86") AND CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(TARGET_ARCH_x64 1)
    set(TARGET_ARCH_NAME "x64")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64" AND CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(TARGET_ARCH_x86 1)
    set(TARGET_ARCH_NAME "x86")
endif()


# Determine compiler
if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(TARGET_COMPILER_MSVC 1)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(TARGET_COMPILER_CLANG 1)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(TARGET_COMPILER_GCC 1)
endif()

if (TARGET_PLATFORM_WINDOWS)
    if(${CMAKE_SYSTEM_NAME} STREQUAL "WindowsStore")
        set(TARGET_PLATFORM_UNIVERSAL_WINDOWS TRUE CACHE INTERNAL "Target platform: Windows Store")
        message("Target platform: Universal Windows. SDK Version: " ${CMAKE_SYSTEM_VERSION})
    endif()
endif()

if (TARGET_PLATFORM_UNIVERSAL_WINDOWS)
    set(D3D11_SUPPORTED TRUE CACHE INTERNAL "D3D11 is supported on Univeral Windows platform")
    if(NOT CMAKE_SYSTEM_VERSION STREQUAL "8.1")
        set(D3D12_SUPPORTED TRUE CACHE INTERNAL "D3D12 is supported on Univeral Windows platform")
    endif()
elseif (TARGET_PLATFORM_WINDOWS)
    if (TARGET_COMPILER_MSVC)
        set(D3D11_SUPPORTED TRUE CACHE INTERNAL "D3D11 is supported on Win32 platform")
        if(NOT CMAKE_SYSTEM_VERSION STREQUAL "8.1")
            set(D3D12_SUPPORTED TRUE CACHE INTERNAL "D3D12 is supported on Win32 platform")
        endif()
	else()
        message("Building with MinGW")
        set(MINGW_BUILD TRUE CACHE INTERNAL "Building with MinGW")
        set(D3D11_SUPPORTED FALSE CACHE INTERNAL "D3D11 requires compiling with MSVC")
        set(D3D12_SUPPORTED FALSE CACHE INTERNAL "D3D12 requires compiling with MSVC")
    endif()

    set(GL_SUPPORTED TRUE CACHE INTERNAL "OpenGL is supported on Win32 platform")
    if(TARGET_ARCH_x64)
        set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is supported on Win64 platform")
    endif()
elseif (TARGET_PLATFORM_ANDROID)
    set(GLES_SUPPORTED TRUE CACHE INTERNAL "OpenGLES is supported on Android platform")
    string(REGEX MATCH [0-9]+ ANDROID_API_LEVEL ${ANDROID_PLATFORM})
    if(TARGET_ARCH_x64 AND ${ANDROID_API_LEVEL} GREATER 23)
        set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is supported on Android platform")
    endif()
endif()
